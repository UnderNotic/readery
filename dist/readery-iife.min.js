var readery=function(t){"use strict";var n=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}();var e=new FileReader;var r=function(){function t(n,e,r,a,i){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.FILE_SIZE=n,this.offset=0,this.lastUnhandledChunkPart="",this.dataCb=e,this.loadingProgressCb=r,this.finishedCb=a,this.config=i,this.readNextChunk=this.readNextChunk.bind(this),this.readLastChunk=this.readLastChunk.bind(this)}return n(t,[{key:"readToEnd",value:function(t,n,r,a,i){var s=this,o=t.slice(this.offset,10+this.offset),h=0;!function t(){s.FILE_SIZE-h>10?(e.onload=s.readNextChunk,e.onloadend=t,h+=10):(console.log("EXECUTING"),e.onload=s.readLastChunk,e.onloadend=null),e.readAsText(o)}()}},{key:"readNextChunk",value:function(t){var n=this;if(null!==t.target.error)return console.error("Read error: "+t.target.error),void this.dataCb(null,new Error("Read error: "+t.target.error));this.offset+=t.target.result.length;var e=this.lastUnhandledChunkPart.concat(t.target.result).split(this.config.splitBy);this.lastUnhandledChunkPart=e.pop(),e.forEach(function(t){n.dataCb(t)}),this.loadingProgressCb(this.offset/this.FILE_SIZE*100)}},{key:"readLastChunk",value:function(t){var n=this,e=this.lastUnhandledChunkPart.concat(t.target.result).split(this.config.splitBy);e.push(this.lastUnhandledChunkPart),e.forEach(function(t){return n.dataCb(t)}),this.loadingProgressCb(100),this.finishedCb()}}]),t}();return t.readFromFile=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{splitBy:/[\r?\n]+/,encoding:"UTF-8"},s=t.size;new r(s,n,e,a,i).readToEnd(t,n,e,a,i)},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZGVyeS1paWZlLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNodW5rU2l6ZSA9IDEwO1xuY29uc3QgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkRnJvbUZpbGUoXG4gIGZpbGUsXG4gIGRhdGFDYixcbiAgbG9hZGluZ1Byb2dyZXNzQ2IgPSAoKSA9PiB7fSxcbiAgZmluaXNoZWRDYiA9ICgpID0+IHt9LFxuICBjb25maWcgPSB7IHNwbGl0Qnk6IC9bXFxyP1xcbl0rLywgZW5jb2Rpbmc6IFwiVVRGLThcIiB9XG4pIHtcbiAgY29uc3QgZmlsZVNpemUgPSBmaWxlLnNpemU7XG4gIGNvbnN0IGNodW5rUmVhZGVyID0gbmV3IE9mZnNldENodW5rUmVhZGVySGFuZGxlcihcbiAgICBmaWxlU2l6ZSxcbiAgICBkYXRhQ2IsXG4gICAgbG9hZGluZ1Byb2dyZXNzQ2IsXG4gICAgZmluaXNoZWRDYixcbiAgICBjb25maWdcbiAgKTtcbiAgY2h1bmtSZWFkZXIucmVhZFRvRW5kKGZpbGUsIGRhdGFDYiwgbG9hZGluZ1Byb2dyZXNzQ2IsIGZpbmlzaGVkQ2IsIGNvbmZpZyk7XG59XG5cbmNsYXNzIE9mZnNldENodW5rUmVhZGVySGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKGZpbGVTaXplLCBkYXRhQ2IsIGxvYWRpbmdQcm9ncmVzc0NiLCBmaW5pc2hlZENiLCBjb25maWcpIHtcbiAgICB0aGlzLkZJTEVfU0laRSA9IGZpbGVTaXplO1xuICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICB0aGlzLmxhc3RVbmhhbmRsZWRDaHVua1BhcnQgPSBcIlwiO1xuXG4gICAgdGhpcy5kYXRhQ2IgPSBkYXRhQ2I7XG4gICAgdGhpcy5sb2FkaW5nUHJvZ3Jlc3NDYiA9IGxvYWRpbmdQcm9ncmVzc0NiO1xuICAgIHRoaXMuZmluaXNoZWRDYiA9IGZpbmlzaGVkQ2I7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG5cbiAgICB0aGlzLnJlYWROZXh0Q2h1bmsgPSB0aGlzLnJlYWROZXh0Q2h1bmsuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlYWRMYXN0Q2h1bmsgPSB0aGlzLnJlYWRMYXN0Q2h1bmsuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHJlYWRUb0VuZChmaWxlLCBkYXRhQ2IsIGxvYWRpbmdQcm9ncmVzc0NiLCBmaW5pc2hlZENiLCBjb25maWcpIHtcbiAgICBjb25zdCBibG9iID0gZmlsZS5zbGljZSh0aGlzLm9mZnNldCwgY2h1bmtTaXplICsgdGhpcy5vZmZzZXQpO1xuXG4gICAgbGV0IGkgPSAwO1xuICAgIGNvbnN0IGxvYWQgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5GSUxFX1NJWkUgLSBpID4gY2h1bmtTaXplKSB7XG4gICAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gdGhpcy5yZWFkTmV4dENodW5rO1xuICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZGVuZCA9IGxvYWQ7XG4gICAgICAgIGkgKz0gY2h1bmtTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkVYRUNVVElOR1wiKTtcbiAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSB0aGlzLnJlYWRMYXN0Q2h1bms7XG4gICAgICAgIGZpbGVSZWFkZXIub25sb2FkZW5kID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGZpbGVSZWFkZXIucmVhZEFzVGV4dChibG9iKTtcbiAgICB9XG4gICAgbG9hZCgpO1xuICB9XG5cbiAgcmVhZE5leHRDaHVuayhldnQpIHtcbiAgICBpZiAoZXZ0LnRhcmdldC5lcnJvciAhPT0gbnVsbCkge1xuICAgICAgY29uc29sZS5lcnJvcihgUmVhZCBlcnJvcjogJHtldnQudGFyZ2V0LmVycm9yfWApO1xuICAgICAgdGhpcy5kYXRhQ2IobnVsbCwgbmV3IEVycm9yKGBSZWFkIGVycm9yOiAke2V2dC50YXJnZXQuZXJyb3J9YCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkZWJ1Z2dlcjtcbiAgICB0aGlzLm9mZnNldCArPSBldnQudGFyZ2V0LnJlc3VsdC5sZW5ndGg7XG4gICAgY29uc3Qgc3BsaXR0ZWQgPSB0aGlzLmxhc3RVbmhhbmRsZWRDaHVua1BhcnRcbiAgICAgIC5jb25jYXQoZXZ0LnRhcmdldC5yZXN1bHQpXG4gICAgICAuc3BsaXQodGhpcy5jb25maWcuc3BsaXRCeSk7XG5cbiAgICB0aGlzLmxhc3RVbmhhbmRsZWRDaHVua1BhcnQgPSBzcGxpdHRlZC5wb3AoKTtcblxuICAgIHNwbGl0dGVkLmZvckVhY2goZCA9PiB7XG4gICAgIHRoaXMuZGF0YUNiKGQpO1xuICAgIH0pO1xuICAgIHRoaXMubG9hZGluZ1Byb2dyZXNzQ2IodGhpcy5vZmZzZXQgLyB0aGlzLkZJTEVfU0laRSAqIDEwMCk7XG4gIH1cblxuICByZWFkTGFzdENodW5rKGV2dCkge1xuICAgIGNvbnN0IHNwbGl0dGVkID0gdGhpcy5sYXN0VW5oYW5kbGVkQ2h1bmtQYXJ0XG4gICAgLmNvbmNhdChldnQudGFyZ2V0LnJlc3VsdClcbiAgICAuc3BsaXQodGhpcy5jb25maWcuc3BsaXRCeSk7XG5cbiAgICBzcGxpdHRlZC5wdXNoKHRoaXMubGFzdFVuaGFuZGxlZENodW5rUGFydCk7XG4gICAgc3BsaXR0ZWQuZm9yRWFjaChkID0+IHRoaXMuZGF0YUNiKGQpKTtcbiAgICB0aGlzLmxvYWRpbmdQcm9ncmVzc0NiKDEwMCk7XG4gICAgdGhpcy5maW5pc2hlZENiKCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJmaWxlUmVhZGVyIiwiRmlsZVJlYWRlciIsIk9mZnNldENodW5rUmVhZGVySGFuZGxlciIsImZpbGVTaXplIiwiZGF0YUNiIiwibG9hZGluZ1Byb2dyZXNzQ2IiLCJmaW5pc2hlZENiIiwiY29uZmlnIiwiRklMRV9TSVpFIiwib2Zmc2V0IiwibGFzdFVuaGFuZGxlZENodW5rUGFydCIsInJlYWROZXh0Q2h1bmsiLCJ0aGlzIiwiYmluZCIsInJlYWRMYXN0Q2h1bmsiLCJmaWxlIiwiYmxvYiIsInNsaWNlIiwiaSIsImxvYWQiLCJfdGhpcyIsIm9ubG9hZCIsIm9ubG9hZGVuZCIsImxvZyIsInJlYWRBc1RleHQiLCJldnQiLCJ0YXJnZXQiLCJlcnJvciIsIkVycm9yIiwicmVzdWx0IiwibGVuZ3RoIiwic3BsaXR0ZWQiLCJjb25jYXQiLCJzcGxpdCIsInNwbGl0QnkiLCJwb3AiLCJmb3JFYWNoIiwiZCIsInB1c2giLCJfdGhpczMiLCJlbmNvZGluZyIsInNpemUiLCJyZWFkVG9FbmQiXSwibWFwcGluZ3MiOiI4UkFBQSxJQUNNQSxFQUFhLElBQUlDLGVBb0JqQkMsd0JBQ1FDLEVBQVVDLEVBQVFDLEVBQW1CQyxFQUFZQyw4R0FDdERDLFVBQVlMLE9BQ1pNLE9BQVMsT0FDVEMsdUJBQXlCLFFBRXpCTixPQUFTQSxPQUNUQyxrQkFBb0JBLE9BQ3BCQyxXQUFhQSxPQUNiQyxPQUFTQSxPQUVUSSxjQUFnQkMsS0FBS0QsY0FBY0UsS0FBS0QsV0FDeENFLGNBQWdCRixLQUFLRSxjQUFjRCxLQUFLRCxrREFHckNHLEVBQU1YLEVBQVFDLEVBQW1CQyxFQUFZQyxjQUMvQ1MsRUFBT0QsRUFBS0UsTUFBTUwsS0FBS0gsT0FyQ2YsR0FxQ21DRyxLQUFLSCxRQUVsRFMsRUFBSSxHQUNLLFNBQVBDLElBQ0FDLEVBQUtaLFVBQVlVLEVBekNULE1BMENDRyxPQUFTRCxFQUFLVCxnQkFDZFcsVUFBWUgsS0EzQ2IsYUE4Q0ZJLElBQUksZUFDREYsT0FBU0QsRUFBS04sZ0JBQ2RRLFVBQVksUUFFZEUsV0FBV1IsNENBS1pTLGlCQUNhLE9BQXJCQSxFQUFJQyxPQUFPQyxxQkFDTEEscUJBQXFCRixFQUFJQyxPQUFPQyxpQkFDbkN2QixPQUFPLEtBQU0sSUFBSXdCLHFCQUFxQkgsRUFBSUMsT0FBT0MsYUFJbkRsQixRQUFVZ0IsRUFBSUMsT0FBT0csT0FBT0MsV0FDM0JDLEVBQVduQixLQUFLRix1QkFDbkJzQixPQUFPUCxFQUFJQyxPQUFPRyxRQUNsQkksTUFBTXJCLEtBQUtMLE9BQU8yQixjQUVoQnhCLHVCQUF5QnFCLEVBQVNJLFFBRTlCQyxRQUFRLGNBQ1hoQyxPQUFPaUMsVUFFUmhDLGtCQUFrQk8sS0FBS0gsT0FBU0csS0FBS0osVUFBWSwyQ0FHMUNpQixjQUNOTSxFQUFXbkIsS0FBS0YsdUJBQ3JCc0IsT0FBT1AsRUFBSUMsT0FBT0csUUFDbEJJLE1BQU1yQixLQUFLTCxPQUFPMkIsV0FFVkksS0FBSzFCLEtBQUtGLDBCQUNWMEIsUUFBUSxtQkFBS0csRUFBS25DLE9BQU9pQyxVQUM3QmhDLGtCQUFrQixVQUNsQkMsNENBaEZULFNBQ0VTLEVBQ0FYLE9BQ0FDLHlEQUFvQixhQUNwQkMseURBQWEsYUFDYkMsMERBQVcyQixRQUFTLFdBQVlNLFNBQVUsU0FFcENyQyxFQUFXWSxFQUFLMEIsS0FDRixJQUFJdkMsRUFDdEJDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEdBRVVtQyxVQUFVM0IsRUFBTVgsRUFBUUMsRUFBbUJDLEVBQVlDIn0=
